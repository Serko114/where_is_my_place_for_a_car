
# ------------------------------------------------- NODES --------------------------------------------------

# -------------detection, tracking noda: VideoReader.py------------------------------------------
pipeline:
  save_video : False  # Сохранение итогового видео обработки
  send_info_db: True  # Сохраняем ли инфо в бд (требуется заранее запустить микросервисы если ставите True)
  video_show : False

video_reader:
  src: video/video.mp4 #${oc.env:VIDEO_SRC} # путь до файла обработки или номер камеры (int) или ссылки на m3u8 / rtsp поток
  # skip_secs : 0  # считываем кадры раз в <skip_secs> секунд
  # roads_info: ${oc.env:ROADS_JSON} # json файл с координатами дорог на видео

# -------------detection, tracking noda: DetectionTrackingNodes.py------------------------------------------
detection_node:
  weight_pth: model/best.pt  # Путь до модели .pt или .engine (TensorRT)
  classes_to_detect: [0,1,2,3,4,5]  # весь транспорт из классов COCO
  confidence: 0.10  # Порог уверенности детектора (чем больше значение, тем меньше находит)
  iou: 0.7  # Порог NMS (чем больше значение, тем больше находит)
  imgsz: 640  # Ресайз при инференсе (640 по умолчанию)
  dict_clsses: {'calm':0, 'joyful':1, 'delighted':2, 'surprised':3, 'sad':4, 'evil':5}


tracking_node:  
  # Использован ByteTrack (https://github.com/ifzhang/ByteTrack)
  first_track_thresh: 0.5  # Пороговое значение для первичной инициализации трека
  second_track_thresh: 0.10  # Пороговое значение для поддержания трека
  match_thresh: 0.95  # Чем больше значение, тем больше может быть расстояние между соседними обнаруженими чтобы держать трек
  track_buffer: 125  # Время жизни трека после исчезновения из поля зрения (измеряется в числе кадров)

# -----------------------------------------------------------------------------------------------------------

show_node:
  scale : 0.6  # Масштабирование итогового окна результатов при imshow=True
  imshow: True  # Нужно ли выводить видео в процессе обработки
  fps_counter_N_frames_stat : 15  # Окно усредения fsp счетчика
  draw_fps_info : True  # Указывать ли fps обработки
  show_roi: True  # Показывать ли регионы примыкающих дорог 
  overlay_transparent_mask: False # Заливка регионов при show_roi=True (медленная операция)
  show_only_yolo_detections : False  # Отображать лишь результаты детекции без учета трекинга и прочей логики кода
  show_track_id_different_colors: True  # Отображать цвет бокса согласно id трека, а не логике прибытия объекта
  show_info_statistics: False  # Вывод информации о статистике в отдельном окне справа от кадра
  show_russians_classes: {'calm': 'спокойствие :|', 
                          'joyful': 'радость :)', 
                          'delighted': 'восхищение 8D', 
                          'surprised': 'удивление :O', 
                          'sad': 'грусть :(',
                          'evil': 'злость :X'}

video_saver_node:
  fps : 24  # при увеличении позволяет ускорить итоговое видео
  out_folder : content_for_readme/video_gif/output_video.mp4  # в какую папку сохранить результат

send_info_db_node:
  drop_table: True  # Нужно ли полностью очищать бд при повторном перезапуске приложения (полезно при тестированиях)
  how_often_add_info: 5  # как часто добавлять новую информацию (раз в столько секунд)
  table_name: russia #${oc.env:TABLE_NAME}  # имя таблицы в БД в которую ведем запись
  connection_info:  # данные о подключении (должны совпадать со значениями из docker-compose файла)
    user: root
    password: root
    host: postgresS
    port: 5432 # порт контейнера с PostgreSQL
    database: grim
